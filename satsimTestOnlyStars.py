import os
import glob
from satsim import gen_multi, load_json
from astride import Streak

def do(ssp, den, sc):
    ssp['geometry']['stars']['mv']['density'] = den

    # Output directory
    output_dir = 'outputOnlyStars/'
    os.makedirs(output_dir, exist_ok=True)  # Create the output directory if it doesn't exist

    # Generate SatNet files to output directory
    gen_multi(ssp, eager=True, output_dir=output_dir)

    directory = os.path.join(os.getcwd(), output_dir)

    print(f"Simulation complete, commencing ASTRiDE analysis.")

    folders = glob.glob(os.path.join(directory, '*/'))

    newest_folder = max(folders, key=os.path.getmtime)
    newest_folder = newest_folder + 'ImageFiles/'

    all_files = glob.glob(os.path.join(newest_folder, '*.fits'))

    for file in all_files:
        streak = Streak(file, shape_cut=sc)

        # Detect streaks
        streak.detect()

        # Write outputs and plot figures
        streak.write_outputs()
        streak.plot_figures()

# Configuration file path
config_path = 'input/config.json'
if not os.path.isfile(config_path):
    raise FileNotFoundError(f"The configuration file was not found at: {config_path}")

# Load the configuration JSON file
ssp = load_json(config_path)

densities = [
    [0,0,0,0,0,0.73333,0,1.6667,3.7333,11.494,18.172,33.236,36.531,57.311,93.314,149.13,250.63,380.99],
    [0,0,0,0,0,0,0.025,0.81389,3.8139,5.4417,11.722,24.064,33.564,52.906,96.839,153.4,246.16,401.81],
    [0.066667,0,0,0,0,0,0.10833,0.54722,1.6111,4.8917,12.753,24.133,34.842,55.106,89.014,150.35,238.86,386.89],
    [0,0,0,0,0.0027778,0.044444,0.15278,0.50556,2.0472,4,11.311,20.456,29.428,54.131,89.439,147.24,241.05,382.97],
    [0.041667,0,0,0,0.063889,0,0.125,0.60556,2.2222,4.9222,9.9667,21.028,30.414,50.325,85.942,142.24,231.52,363.62],
    [0.025,0,0,0,0.077778,0.18056,0.23056,0.84444,2.0972,4.1778,10.328,20.975,30.808,50.05,87.389,145.15,230.64,362.44],
    [0.066667,0,0,0,0.027778,0.097222,0.175,0.56389,2.2861,4.2056,9.4611,22.35,32.642,50.419,86.45,146.57,232.4,356.19],
    [0.0083333,0,0,0,0,0.052778,0.25556,0.84167,2.3444,4.0333,10.119,21.944,33.742,53.128,90.192,153.36,232.91,368.26],
    [0.011111,0,0,0,0,0.063889,0.10833,0.74444,2.0028,4.5528,9.3139,23.094,34.769,54.458,92.669,154.78,246.45,392.19],
    [0.019444,0,0,0,0.016667,0.058333,0.225,0.49444,1.8778,4.7389,9.7917,23.775,33.553,52.397,92.956,151.42,241.26,381.76],
    [0.011111,0,0,0,0.016667,0.058333,0.11667,0.61667,1.9306,4.7139,10.328,23.239,34.578,54.544,95.136,153.14,241.2,380.31],
    [0,0,0.013889,0,0.013889,0.016667,0.13056,0.68611,2.25,4.6722,10.456,23.303,33.842,55.425,96.061,155.57,245.93,397.13],
    [0.013889,0,0,0,0,0.022222,0.22222,0.87222,2.4278,4.8472,10.336,23.433,32.478,53.992,93.669,151.58,239.23,391.26],
    [0.033333,0,0,0,0.013889,0.086111,0.10278,0.825,2.2917,4.7222,10.733,23.158,32.081,53.675,94.703,150.83,239.93,383.15],
    [0.022222,0,0,0,0.030556,0.075,0.16389,0.74722,2.1444,4.7167,9.9556,22.917,31.622,54.422,94.758,153.04,243.34,388.23],
    [0.019444,0,0,0,0.0027778,0.038889,0.12222,0.57778,2.3056,4.3944,10.353,24.356,32.372,56.297,95.758,157.59,250.93,394.28],
    [0.011111,0,0.013889,0,0.011111,0.063889,0.13333,0.61111,2.2139,4.5556,10.658,23.547,33.494,56.964,96.883,157.49,255.17,402.11],
    [0.033333,0,0.0055556,0,0.027778,0.036111,0.13889,0.73889,2.425,5.0944,10.714,23.811,34.881,57.964,100.45,157.73,252.34,403.88],
    [0.019444,0,0,0,0,0.05,0.14722,0.68889,2.4639,5.4167,10.728,24.219,34.144,57.761,102.54,157.51,257.87,410.21],
    [0.013889,0,0.0083333,0,0,0.030556,0.18611,0.64444,2.2611,5.1083,10.561,22.544,34.661,55.869,100.88,161.59,265.92,429.38],
    [0.033333,0,0,0.0083333,0.013889,0.030556,0.13333,0.74722,2.3722,4.975,10.875,22.214,33.889,55.161,103.67,168.92,269.35,436.31],
    [0.0027778,0,0,0,0.0083333,0.0055556,0.1,0.71667,2.3167,5.1722,11.406,23.411,34.028,55.536,104.99,171.03,272.99,438.94],
    [0.0055556,0,0,0.0083333,0.030556,0.044444,0.13611,0.65,2.1833,5.1056,10.119,23.444,35.331,56.458,107.43,177.22,278.39,444.9],
    [0.011111,0,0.0055556,0.016667,0.011111,0.061111,0.16944,0.61111,2.3167,4.9639,10.489,23.203,34.083,56.492,105.48,175.3,279.98,441.84],
    [0.025,0,0,0.0055556,0.011111,0.022222,0.16389,0.71667,2.6361,4.8444,10.931,23.894,35.039,58.844,105.92,175.97,279.24,434.07],
    [0.0055556,0,0.0083333,0.0083333,0.036111,0.044444,0.12778,0.75278,2.3944,5.3806,11.386,23.522,34.097,58.742,107.3,175.11,281.8,431.41],
    [0.030556,0,0,0.011111,0.016667,0.075,0.18889,0.63333,2.3861,5.4333,11.003,24.606,34.981,59.547,108.47,177.97,284.07,441.01],
    [0.0083333,0,0,0,0.0083333,0.022222,0.15833,0.675,2.4028,5.4389,10.961,24.111,34.881,60.225,109.49,178.58,281.9,439.91],
    [0.019444,0,0.0055556,0.016667,0.036111,0.038889,0.097222,0.66944,2.4778,5.0028,10.269,24.328,35.192,60.017,110.06,180.28,285.53,446.14],
    [0.0083333,0,0,0.013889,0.022222,0.080556,0.125,0.85278,2.5278,5.2028,11.025,23.889,36.256,60.4,113.43,186.42,292.99,449.9]]

shape_cut = [0.2, 0.3, 0.4, 0.5]

shaLength = len(shape_cut)
denLength = len(densities)
totLength = shaLength * denLength
ind = 0

ssp['fpa']['num_frames'] = 1
ssp['background']['galactic'] = 26
ssp['geometry']['obs'] = {
        "mode": "list",
        "list": {
            "$sample": "random.list",
            "length": 1,
            "value": {
                "mode": "line",
                "origin": [-1, -1],
                "velocity": [0,0],
                "mv": 19.0
            }
        }
    }

for sc in shape_cut:
    for den in densities:
        ind += 1
        do(ssp, den, sc)
        print(f"{round(100 * ind / totLength, 1)}% complete.")